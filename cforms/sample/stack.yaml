AWSTemplateFormatVersion: '2010-09-09'
Description: Ephemeral Environment Deployment

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: OrderMgmt

  TTL:
    Description: The amount of time you need this environment up and running for (in hours)
    Type: Number
    Default: 4

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 18081
          ToPort: 18081
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 18082
          ToPort: 18082
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 19092
          ToPort: 19092
          CidrIp: 0.0.0.0/0

  RedpandaInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c8a60caed22607cd
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref SecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 128
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt install -y git
          # Clone redpanda stack
          sudo git clone https://github.com/unnamedjk/docker-stacks /repo
          cd /repo/redpanda
          # Set env variables
          export AWS_PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
          export AWS_PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
          # Perform envsubst
          envsubst '${!AWS_PUBLIC_IP} ${!AWS_PUBLIC_HOSTNAME}' < docker-compose.tpl > /tmp/docker-compose.yaml
          # Move updated docker-compose back to original location
          sudo mv /tmp/docker-compose.yaml .
          # Start Redpanda
          sudo docker compose -f /repo/redpanda/docker-compose.yaml up -d
        
Outputs:
  SDBInitScript:
    Description: The url location of the SQL init script template to be executed after standing up the stack
    Value: !Sub "https://foobar.com"
  RedpandaIPAddress:
    Description: Public IP address of the Redpanda instance
    Value: !GetAtt RedpandaInstance.PublicIp
  RedpandaHostname:
    Description: Public IP address of the Redpanda instance
    Value: !GetAtt RedpandaInstance.PublicDnsName